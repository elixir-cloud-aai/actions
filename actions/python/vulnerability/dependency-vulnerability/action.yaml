---
name: Dependency Vulnerability Test
description: Set up environment, run dependency vulnerability checks, and report findings.

inputs:
  os:
    default: ubuntu-latest
    description: The operating system to use
    required: false
  python_version:
    default: '3.12'
    description: The version of Python to use
    required: false
  poetry_install_options:
    default: '--only=vulnerability --no-root'
    description: Options for installing dependencies via poetry
    required: false
  poetry_export_options:
    default: '--only=vulnerability'
    description: Options for exporting dependencies for cache invalidation
    required: false

runs:
  using: composite
  steps:
    - name: Check out repository
      uses: actions/checkout@v4

    - name: Set up environment
      id: setup
      continue-on-error: true
      uses: elixir-cloud-aai/actions/python/setup/poetry@main
      with:
        os: ${{ inputs.os }}
        python_version: ${{ inputs.python_version }}
        poetry_install_options: ${{ inputs.poetry_install_options }}
        poetry_export_options: ${{ inputs.poetry_export_options }}

    - name: Comment on PR
      if: steps.setup.outcome == 'failure'
      uses: elixir-cloud-aai/actions/github/comment@main
      with:
        ci_name: safety
        step_name: setup
        commit_id: ${{ github.sha }}
        issue_number: ${{ github.event.number }}
        username: ${{ github.actor}}
        message: |
          **üö® CI Failure: Setup Step**

          Hi @${{ inputs.username }},

          The **`safety`** CI has encountered a failure during the 
          **`setup`** step.

          **Action Required:**
          Please review your `pyproject.toml` file to ensure that the dependency groups,
          especially the `vulnerability` group, are correctly defined.

          **Environment Details:**
          <details>
          <summary>Enviroment</summary>
          - **Operating System:** ${{ inputs.os }}
          - **Python Version:** ${{ inputs.python_version }}
          - **Poetry Install Options:** `${{ inputs.poetry_install_options }}`
          - **Poetry Export Options:** `${{ inputs.poetry_export_options }}`
          </details>

          If you need assistance, please refer to the [Poetry documentation](https://python-poetry.org/docs/),
          or reach out to the maintainers.

    - name: Check dependency vulnerabilities with Safety
      shell: bash
      id: check
      continue-on-error: true
      run: poetry run safety check --full-report

    - name: Comment on PR
      if: steps.check.outcome == 'failure'
      uses: elixir-cloud-aai/actions/github/comment@main
      with:
        ci_name: safety
        step_name: check
        commit_id: ${{ github.sha }}
        issue_number: ${{ github.event.number }}
        username: ${{ github.actor}}
        message: |
          **üîç Code Vulnerability Check Failed**
          
          Hi @${{ inputs.username }},
          
          The **`safety`** CLI has identified potential vulnerabilities in
          dependencies.
          
          ### **Action Required:**
          
          Please review and address these vulnerabilities by executing the 
          following command:
          
          ```bash
          poetry run safety check --full-report
          ```
          
          This command will generate a comprehensive report detailing any 
          identified issues.
          
          ### **Next Steps:**
          
          1. **Run the Safety Check:**
            
            Execute the command above to obtain a full report of vulnerabilities.
          
          2. **Analyze the Report:**
            
            - **Critical Issues:** Prioritize fixing vulnerabilities marked as 
              critical.
            - **Moderate/Low Issues:** Assess the impact and address as 
              necessary.
          
          3. **Update Dependencies:**
            
            - Upgrade affected packages to versions where vulnerabilities are 
              resolved.
            - If no fixes are available, consider alternative packages or 
              consult the package maintainers.
          
          ### **üìå Ignoring False Positives**
          
          If you have verified that a reported vulnerability is a false 
          positive or is not applicable to your project, you can safely
          ignore it by updating your `.safety-policy.yaml` file.
          
          <details>
          <summary>How to Ignore Specific Vulnerabilities</summary>
          
          Add the following configuration to `.safety-policy.yaml`:
          
          ```yaml
          security:
            ignore-vulnerabilities:
              ERROR_CODE:
                reason: 'REASON_FOR_IGNORING'
                expires: 'YYYY-MM-DD'
          ```
          
          - **`ERROR_CODE`**: Replace with the specific vulnerability identifier you wish to ignore.
          - **`REASON_FOR_IGNORING`**: Provide a clear and concise explanation for ignoring this vulnerability.
          - **`YYYY-MM-DD`**: Set an expiration date to review the ignore rule in the future.
          
          **Example:**
          
          ```yaml
          security:
            ignore-vulnerabilities:
              CVE-2023-1234:
                reason: 'False positive detected due to specific usage context.'
                expires: '2024-12-31'
          ```
          
          </details>
          
          ### **Additional Resources:**
          
          - [Safety CLI Documentation](https://pyup.io/safety/)