---
name: Code Vulnerability Test
description: Set up environment, run code vulnerability checks, and report
  findings.

inputs:
  os:
    default: ubuntu-latest
    description: The operating system to use
    required: false
  python_version:
    default: "3.12"
    description: The version of Python to use
    required: false
  poetry_install_options:
    default: --only=vulnerability --no-root
    description: Options for installing dependencies via poetry
    required: false
  poetry_export_options:
    default: --only=vulnerability
    description: Options for exporting dependencies for cache invalidation
    required: false
  config_path:
    description: The path to the Bandit configuration file
    default: pyproject.toml
    required: false
  file_path:
    description: The path to the file or directory to check for vulnerabilities
    required: true

runs:
  using: composite
  steps:
    - name: Check out repository
      uses: actions/checkout@v4

    - name: Set up environment
      uses: elixir-cloud-aai/actions/python/setup/poetry@main
      id: setup
      continue-on-error: false
      with:
        os: ${{ inputs.os }}
        python_version: ${{ inputs.python_version }}
        poetry_install_options: ${{ inputs.poetry_install_options }}
        poetry_export_options: ${{ inputs.poetry_export_options }}

    - name: Comment on PR
      if: steps.setup.outcome == 'failure'
      uses: elixir-cloud-aai/actions/github/comment@main
      with:
        ci_name: bandit
        step_name: setup
        commit_id: ${{ github.sha }}
        issue_number: ${{ github.event.number }}
        username: ${{ github.actor}}
        message: |
          **üö® CI Failure: Setup Step**

          Hi @${{ inputs.username }},

          The **`bandit`** CI has encountered a failure during the
          **`setup`** step.

          **Action Required:**
          Please review your `pyproject.toml` file to ensure that the dependency groups,
          especially the `vulnerability` group, are correctly defined.

          **Environment Details:**
          <details>
          <summary>Enviroment</summary>
          - **Operating System:** ${{ inputs.os }}
          - **Python Version:** ${{ inputs.python_version }}
          - **Poetry Install Options:** `${{ inputs.poetry_install_options }}`
          - **Poetry Export Options:** `${{ inputs.poetry_export_options }}`
          </details>

          If you need assistance, please refer to the [Poetry documentation](https://python-poetry.org/docs/),
          or reach out to the maintainers.

    - name: Check code vulnerabilities with Bandit
      id: check
      continue-on-error: true
      shell: bash
      run: poetry run bandit \
        -c ${{ inputs.config_path }} \
        -r ${{ inputs.file_path }}

    - name: Comment on PR
      if: steps.check.outcome == 'failure'
      uses: elixir-cloud-aai/actions/github/comment@main
      with:
        ci_name: bandit
        step_name: check
        commit_id: ${{ github.sha }}
        issue_number: ${{ github.event.number }}
        username: ${{ github.actor}}
        message: |
          **üîç Code Vulnerability Check Failed: Bandit Analysis**

          Hi @${{ inputs.username }},

          The **`Bandit`** static analysis tool has identified potential
          security vulnerabilities in your codebase during the **`bandit`**
          analysis step.

          ---

          ### **üìå Action Required**

          Please review and address the identified vulnerabilities by following
          these steps:

          1. **Run Bandit Analysis:**

            Execute the following command to generate a detailed report of
            the vulnerabilities:

            ```bash
            poetry run bandit -c ${{ inputs.config_path }} -r ${{ inputs.file_path }}
            ```

          ---

          ### **üìå Ignoring False Positives**

          If you have verified that a reported vulnerability is a false
          positive or is not applicable to your project, you can safely ignore
          it by updating the `skips` list in your `pyproject.toml` file.

          <details>
          <summary>How to Ignore Specific Vulnerabilities</summary>

          Add the following configuration to your `pyproject.toml`:

          ```toml
          [tool.bandit]
          skips = [
            "B108"  # Insecure usage of temp file/directory, false positive.
          ]
          ```

          - **`"B108"`**: Replace with the specific vulnerability identifier
            you wish to ignore.
          - **`'Insecure usage of temp file/directory, false positive.'`**:
            Provide a clear and concise reason for ignoring this vulnerability.

          **Example:**

          ```toml
          [tool.bandit]
          skips = [
            "B108"  # Insecure usage of temp file/directory, false positive.
          ]
          ```

          **Note:** Ensure that you have thoroughly reviewed the
            vulnerabilities before choosing to ignore them to maintain the
            security integrity of your project.

          </details>

          ---

          ### **üîó Additional Resources**

          - [Bandit Documentation](https://bandit.readthedocs.io/en/latest/)
